# Copyright (C) 2013-2018 Nicolas Lamirault <nicolas.lamirault@gmail.com>

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
#
# Vagrant binary : can't install plugin libvirt
#

# - name: Check Vagrant installation
#   command: which vagrant
#   register: vagrant_installation
#   changed_when: false
#   ignore_errors: true
#   check_mode: false

# - name: Get installed Vagrant version
#   shell: "{{ vagrant_installation.stdout }} -version"
#   when: not vagrant_installation is failed
#   changed_when: false
#   check_mode: false
#   register: installed_vagrant_version

# - name: Vagrant installation is required
#   set_fact:
#     vagrant_installation_required: "{{ vagrant_installation is failed or installed_vagrant_version.stdout != vagrant_version }}"

# - name: Install Vagrant
#   when:
#     - vagrant_installation_required
#   unarchive:
#     src: "{{ vagrant_linux_download_url }}"
#     dest: "{{ vagrant_dir }}"
#     remote_src: true

- name: Check Packer installation
  command: which packer
  register: packer_installation
  changed_when: false
  ignore_errors: true
  check_mode: false

- name: Get installed Packer version
  command: "{{ packer_installation.stdout }} -version"
  when: not packer_installation is failed
  changed_when: false
  check_mode: false
  register: installed_packer_version

- name: Packer installation is required
  set_fact:
    packer_installation_required: "{{ packer_installation is failed or installed_packer_version.stdout != packer_version }}"

- name: Download Packer archive
  when:
    - packer_installation_required
  get_url:
    url: "{{ packer_linux_download_url }}"
    dest: /tmp/{{ packer_linux_package_name }}
    mode: 0600
    checksum: "{{ packer_linux_checksum }}"

- name: Install Packer
  when:
    - packer_installation_required
  unarchive:
    src: "/tmp/{{ packer_linux_package_name }}"
    dest: "{{ packer_linux_dir }}"

- name: Check Terraform installation
  command: which terraform
  register: terraform_installation
  changed_when: false
  ignore_errors: true
  check_mode: false

- name: Get installed Terraform version
  shell: "{{ terraform_installation.stdout }} -version|awk -F 'v' '{ print $2}'|head -1"
  when: not terraform_installation is failed
  changed_when: false
  check_mode: false
  register: installed_terraform_version

- name: Terraform installation is required
  set_fact:
    terraform_installation_required: "{{ terraform_installation is failed or installed_terraform_version.stdout != terraform_version }}"

- name: Download Terraform archive
  when:
    - terraform_installation_required
  get_url:
    url: "{{ terraform_linux_download_url }}"
    dest: "/tmp/{{ terraform_linux_package_name }}"
    mode: 0600
    checksum: "{{ terraform_linux_checksum }}"

- name: Install Terraform
  when:
    - terraform_installation_required
  unarchive:
    src: "/tmp/{{ terraform_linux_package_name }}"
    dest: "{{ terraform_linux_dir }}"

- name: Check Vault installation
  command: which vault
  register: vault_installation
  changed_when: false
  ignore_errors: true
  check_mode: false

- name: Get installed Vault version
  shell: "{{ vault_installation.stdout }} -version|awk -F ' ' '{ print $2}'|head -1|sed -e 's/v//g'"
  when: not vault_installation is failed
  changed_when: false
  check_mode: false
  register: installed_vault_version

- name: Vault installation is required
  set_fact:
    vault_installation_required: "{{ vault_installation is failed or installed_vault_version.stdout != vault_version }}"

- name: Download Vault archive
  when:
    - vault_installation_required
  get_url:
    url: "{{ vault_linux_download_url }}"
    dest: "/tmp/{{ vault_linux_package_name }}"
    mode: 0600
    checksum: "{{ vault_linux_checksum }}"

- name: Install Vault
  when:
    - vault_installation_required
  unarchive:
    src: "/tmp/{{ vault_linux_package_name }}"
    dest: "{{ vault_linux_dir }}"

- name: Check Kubernetes CLI installation
  command: which kubectl
  register: kubectl_installation
  changed_when: false
  ignore_errors: true
  check_mode: false

- name: Get installed Kubernetes CLI version
  shell: "{{ kubectl_installation.stdout }} version --client --short|awk -F 'v' '{ print $2}'"
  when: not kubectl_installation is failed
  changed_when: false
  check_mode: false
  register: installed_kubectl_version

- name: Kubernetes installation is required
  set_fact:
    kubernetes_cli_installation_required: "{{ kubectl_installation is failed or installed_kubectl_version.stdout != kubernetes_cli_version }}"

- name: Install Kubernetes CLI
  when:
    - kubernetes_cli_installation_required
  get_url:
    url: "{{ kubernetes_cli_linux_download_url }}"
    dest: "{{ kubernetes_cli_linux_file }}"
    mode: 0755

- name: Check Kubernetes CLI installation
  command: which kubectl
  register: kubectl_installation
  changed_when: false
  ignore_errors: true
  check_mode: false

- name: Get installed Kubernetes CLI version
  shell: "{{ kubectl_installation.stdout }} version --client --short|awk -F 'v' '{ print $2}'"
  when: not kubectl_installation is failed
  changed_when: false
  check_mode: false
  register: installed_kubectl_version

- name: Kubernetes installation is required
  set_fact:
    kubernetes_cli_installation_required: "{{ kubectl_installation is failed or installed_kubectl_version.stdout != kubernetes_cli_version }}"

- name: Check Minikube installation
  command: which minikube
  register: minikube_installation
  changed_when: false
  ignore_errors: true
  check_mode: false

- name: Get installed Minikube version
  shell: "{{ minikube_installation.stdout }} version |awk -F ' ' '{ print $3 }'|sed -e 's/v//g'"
  when: not minikube_installation is failed
  changed_when: false
  check_mode: false
  register: installed_minikube_version

- name: Minikube installation is required
  set_fact:
    minikube_installation_required: "{{ minikube_installation is failed or installed_minikube_version.stdout != minikube_version }}"

- name: Install Minikube
  when:
    - minikube_installation_required
  get_url:
    url: "{{ minikube_linux_download_url }}"
    dest: "{{ minikube_linux_file }}"
    checksum: "{{ minikube_linux_checksum }}"
    mode: 0755

- name: Check GCloud SDK installation
  command: which gcloud
  register: gcloud_sdk_installation
  changed_when: false
  ignore_errors: true
  check_mode: false

- name: Get installed GCloud version
  shell: "{{ gcloud_sdk_installation.stdout }} version|head -1|awk -F ' ' '{ print $4 }'"
  when: not gcloud_sdk_installation is failed
  changed_when: false
  check_mode: false
  register: installed_gcloud_sdk_version

- name: GCloud installation is required
  set_fact:
    gcloud_sdk_installation_required: "{{ gcloud_sdk_installation is failed or installed_gcloud_sdk_version.stdout != gcloud_sdk_version }}"

- name: Install GCloud SDK
  when:
    - gcloud_sdk_installation_required
  unarchive:
    src: "{{ gcloud_sdk_linux_download_url }}"
    dest: "{{ gcloud_sdk_linux_dir }}"
    remote_src: true

- name: Adding GCloud command to user path
  when:
    - gcloud_sdk_installation_required
  file:
    src: "{{ gcloud_sdk_linux_dir }}/google-cloud-sdk/bin/gcloud"
    dest: /home/{{ user }}/bin/gcloud
    state: link

- name: Install Azure CLI
  pip:
    name: azure-cli
    virtualenv: "{{ azure_cli_dir }}"
    version: "{{ azure_cli_version }}"

- name: Install AWS CLI
  pip:
    name: awscli
    virtualenv: "{{ aws_cli_dir }}"
    version: "{{ aws_cli_version }}"

- name: Check Krew installation
  command: which krew
  register: krew_installation
  changed_when: false
  ignore_errors: true
  check_mode: false

- name: Get installed Krew version
  shell: "{{ krew_installation.stdout }} version|awk -F' ' '{ print $2}'|sed -e 's/v//g'"
  when: not krew_installation is failed
  changed_when: false
  check_mode: false
  register: installed_krew_version

- name: Krew installation is required
  set_fact:
    krew_installation_required: "{{ krew_installation is failed or installed_krew_version.stdout != krew_version }}"

- name: Install Krew
  when:
    - krew_installation_required
  unarchive:
    src: "{{ krew_download_url }}"
    dest: "/tmp"
    remote_src: true

- name: Copying Krew file to user path
  copy:
    src: "/tmp/krew-linux_amd64"
    dest: "{{ krew_linux_dir }}/krew"
    owner: "{{ user }}"
    mode: 0755

- name: Download Krew configuration
  when:
    - minikube_installation_required
  get_url:
    url: "{{ krew_yaml_download_url }}"
    dest: "/home/{{ user }}/etc/"

- name: Check Istio installation
  command: which istioctl
  register: istio_installation
  changed_when: false
  ignore_errors: true
  check_mode: false

- name: Get installed Istio version
  shell: "{{ istio_installation.stdout }} version|grep -e '^Version'|awk -F': ' '{ print $2 }'"
  when: not istio_installation is failed
  changed_when: false
  check_mode: false
  register: installed_istio_version

- name: Istio installation is required
  set_fact:
    istio_installation_required: "{{ istio_installation is failed or installed_istio_version.stdout != istio_version }}"

- name: Install Istio
  when:
    - istio_installation_required
  unarchive:
    src: "{{ istio_linux_download_url }}"
    dest: "{{ istio_linux_dir }}"
    remote_src: true

- name: Adding Istio command to user path
  when:
    - istio_installation_required
  file:
    src: "{{ istio_dir }}/istio-{{ istio_version }}/bin/istioctl"
    dest: /home/{{ user }}/bin/istioctl
    state: link

- name: Check Kind installation
  command: which kind
  register: kind_installation
  changed_when: false
  ignore_errors: true
  check_mode: false

- name: Get installed Kind version
  shell: "{{ kind_installation.stdout }} version |awk -F ' ' '{ print $3 }'|sed -e 's/v//g'"
  when: not kind_installation is failed
  changed_when: false
  check_mode: false
  register: installed_kind_version

- name: Kind installation is required
  set_fact:
    kind_installation_required: "{{ kind_installation is failed or installed_kind_version.stdout != kind_version }}"

- name: Install Kind
  when:
    - kind_installation_required
  get_url:
    url: "{{ kind_linux_download_url }}"
    dest: "{{ kind_linux_file }}"
    mode: 0755
