# Copyright (C) 2013-2018 Nicolas Lamirault <nicolas.lamirault@gmail.com>

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
- name: Check Packer installation
  command: which packer
  register: packer_installation
  changed_when: false
  ignore_errors: true
  check_mode: false

- name: Get installed Packer version
  shell: "{{ packer_installation.stdout }} -version"
  when: not packer_installation is failed
  changed_when: false
  check_mode: false
  register: installed_packer_version

- name: Packer installation is required
  set_fact:
    packer_installation_required: "{{ packer_installation is failed or installed_packer_version.stdout != packer_version }}"

- name: Install Packer
  when:
    - packer_installation_required
  unarchive:
    src: "{{ packer_download_url }}"
    dest: "{{ packer_dir }}"
    remote_src: true

- name: Check Terraform installation
  command: which terraform
  register: terraform_installation
  changed_when: false
  ignore_errors: true
  check_mode: false

- name: Get installed Terraform version
  shell: "{{ terraform_installation.stdout }} -version|awk -F 'v' '{ print $2}'|head -1"
  when: not terraform_installation is failed
  changed_when: false
  check_mode: false
  register: installed_terraform_version

- name: Terraform installation is required
  set_fact:
    terraform_installation_required: "{{ terraform_installation is failed or installed_terraform_version.stdout != terraform_version }}"

- name: Install Terraform
  when:
    - terraform_installation_required
  unarchive:
    src: "{{ terraform_download_url }}"
    dest: "{{ terraform_dir }}"
    remote_src: true

- name: Check Vault installation
  command: which vault
  register: vault_installation
  changed_when: false
  ignore_errors: true
  check_mode: false

- name: Get installed Vault version
  shell: "{{ vault_installation.stdout }} -version|awk -F ' ' '{ print $2}'|head -1|sed -e 's/v//g'"
  when: not vault_installation is failed
  changed_when: false
  check_mode: false
  register: installed_vault_version

- name: Vault installation is required
  set_fact:
    vault_installation_required: "{{ vault_installation is failed or installed_vault_version.stdout != vault_version }}"

- name: Install Vault
  when:
    - vault_installation_required
  unarchive:
    src: "{{ vault_download_url }}"
    dest: "{{ vault_dir }}"
    remote_src: true

- name: Check Kubernetes CLI installation
  command: which kubectl
  register: kubectl_installation
  changed_when: false
  ignore_errors: true
  check_mode: false

- name: Get installed Kubernetes CLI version
  shell: "{{ kubectl_installation.stdout }} version --client --short|awk -F 'v' '{ print $2}'"
  when: not kubectl_installation is failed
  changed_when: false
  check_mode: false
  register: installed_kubectl_version

- name: Kubernetes installation is required
  set_fact:
    kubernetes_cli_installation_required: "{{ kubectl_installation is failed or installed_kubectl_version.stdout != kubernetes_cli_version }}"

- name: Install Kubernetes CLI
  when:
    - kubernetes_cli_installation_required
  get_url:
    url: "{{ kubernetes_cli_download_url }}"
    dest: "{{ kubernetes_cli_file }}"
    mode: 0755

- name: Check Kubernetes CLI installation
  command: which kubectl
  register: kubectl_installation
  changed_when: false
  ignore_errors: true
  check_mode: false

- name: Get installed Kubernetes CLI version
  shell: "{{ kubectl_installation.stdout }} version --client --short|awk -F 'v' '{ print $2}'"
  when: not kubectl_installation is failed
  changed_when: false
  check_mode: false
  register: installed_kubectl_version

- name: Kubernetes installation is required
  set_fact:
    kubernetes_cli_installation_required: "{{ kubectl_installation is failed or installed_kubectl_version.stdout != kubernetes_cli_version }}"

- name: Check Minikube installation
  command: which minikube
  register: minikube_installation
  changed_when: false
  ignore_errors: true
  check_mode: false

- name: Get installed Minikube version
  shell: "{{ minikube_installation.stdout }} version |awk -F ' ' '{ print $3 }'|sed -e 's/v//g'"
  when: not minikube_installation is failed
  changed_when: false
  check_mode: false
  register: installed_minikube_version

- name: Minikube installation is required
  set_fact:
    minikube_installation_required: "{{ minikube_installation is failed or installed_minikube_version.stdout != minikube_version }}"

- name: Install Minikube
  when:
    - minikube_installation_required
  get_url:
    url: "{{ minikube_download_url }}"
    dest: "{{ minikube_file }}"
    mode: 0755

- name: Check GCloud SDK installation
  command: which gcloud
  register: gcloud_sdk_installation
  changed_when: false
  ignore_errors: true
  check_mode: false

- name: Get installed GCloud version
  shell: "{{ gcloud_sdk_installation.stdout }} version|head -1|awk -F ' ' '{ print $4 }'"
  when: not gcloud_sdk_installation is failed
  changed_when: false
  check_mode: false
  register: installed_gcloud_sdk_version

- name: GCloud installation is required
  set_fact:
    gcloud_sdk_installation_required: "{{ gcloud_sdk_installation is failed or installed_gcloud_sdk_version.stdout != gcloud_sdk_version }}"

- name: Install GCloud SDK
  when:
    - gcloud_sdk_installation_required
  unarchive:
    src: "{{Â gcloud_sdk_linux_download_url }}"
    dest: "{{ gcloud_sdk_dir }}"
    remote_src: true

- name: Adding GCloud command to user path
  when:
    - gcloud_sdk_installation_required
  file:
    src: "{{ gcloud_sdk_dir }}/google-cloud-sdk/bin/gcloud"
    dest: /home/{{ user }}/bin/gcloud
    state: link

- name: Check Krew installation
  command: which krew
  register: krew_installation
  changed_when: false
  ignore_errors: true
  check_mode: false

- name: Get installed Krew version
  shell: "{{ krew_installation.stdout }} version"
  when: not krew_installation is failed
  changed_when: false
  check_mode: false
  register: installed_krew_version

- name: Krew installation is required
  set_fact:
    krew_installation_required: "{{ krew_installation is failed or installed_krew_version.stdout != krew_version }}"

- name: Install Krew
  when:
    - krew_installation_required
  unarchive:
    src: "{{ krew_download_url }}"
    dest: "/tmp"
    remote_src: true

- name: Copying Krew file to user path
  copy:
    src: "/tmp/krew-linux_amd64"
    dest: "{{ krew_dir }}/krew"
    owner: "{{ user }}"
    group: "{{ user }}"
    mode: 0755
