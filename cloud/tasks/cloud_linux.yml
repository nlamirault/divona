# Copyright (C) 2013-2019 Nicolas Lamirault <nicolas.lamirault@gmail.com>

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
#
# Vagrant binary : can't install plugin libvirt
#

# - name: Check Vagrant installation
#   command: which vagrant
#   register: vagrant_installation
#   changed_when: false
#   ignore_errors: true
#   check_mode: false

# - name: Get installed Vagrant version
#   shell: "{{ vagrant_installation.stdout }} -version"
#   when: not vagrant_installation is failed
#   changed_when: false
#   check_mode: false
#   register: installed_vagrant_version

# - name: Vagrant installation is required
#   set_fact:
#     vagrant_installation_required: "{{ vagrant_installation is failed or installed_vagrant_version.stdout != vagrant_version }}"

# - name: Install Vagrant
#   when:
#     - vagrant_installation_required
#   unarchive:
#     src: "{{ vagrant_linux_download_url }}"
#     dest: "{{ vagrant_dir }}"
#     remote_src: true

- name: Check Packer installation
  command: which packer
  register: packer_installation
  changed_when: false
  ignore_errors: true
  check_mode: false

- name: Get installed Packer version
  command: "{{ packer_installation.stdout }} -version"
  when: not packer_installation is failed
  changed_when: false
  check_mode: false
  register: installed_packer_version

- name: Packer installation is required
  set_fact:
    packer_installation_required: "{{ packer_installation is failed or installed_packer_version.stdout != packer_version }}"

- name: Packer installation
  when:
    - packer_installation_required
  block:
    - name: Download Packer archive
      get_url:
        url: "{{ packer_linux_download_url }}"
        dest: "/tmp/{{ packer_linux_package_name }}"
        mode: 0600
        checksum: "{{ packer_linux_checksum }}"
        force: true

    - name: Install Packer CLI
      unarchive:
        src: "/tmp/{{ packer_linux_package_name }}"
        dest: "{{ packer_linux_dir }}"

- name: Check Terraform installation
  command: which terraform
  register: terraform_installation
  changed_when: false
  ignore_errors: true
  check_mode: false

- name: Get installed Terraform version
  shell: |
    set -o pipefail
    {{ terraform_installation.stdout }} -version|awk -F 'v' '{ print $2}'|head -1
  when: not terraform_installation is failed
  changed_when: false
  check_mode: false
  register: installed_terraform_version

- name: Terraform installation is required
  set_fact:
    terraform_installation_required: "{{ terraform_installation is failed or installed_terraform_version.stdout != terraform_version }}"

- name: Terraform installation
  when:
    - terraform_installation_required
  block:
    - name: Download Terraform archive
      get_url:
        url: "{{ terraform_linux_download_url }}"
        dest: "/tmp/{{ terraform_linux_package_name }}"
        mode: 0600
        checksum: "{{ terraform_linux_checksum }}"
        force: true

    - name: Install Terraform CLI
      unarchive:
        src: "/tmp/{{ terraform_linux_package_name }}"
        dest: "{{ terraform_linux_dir }}"

- name: Check Vault installation
  command: which vault
  register: vault_installation
  changed_when: false
  ignore_errors: true
  check_mode: false

- name: Get installed Vault version
  shell: |
    set -o pipefail
    {{ vault_installation.stdout }} -version|awk -F ' ' '{ print $2}'|head -1|sed -e 's/v//g'
  when: not vault_installation is failed
  changed_when: false
  check_mode: false
  register: installed_vault_version

- name: Vault installation is required
  set_fact:
    vault_installation_required: "{{ vault_installation is failed or installed_vault_version.stdout != vault_version }}"

- name: Vault installation
  when:
    - vault_installation_required
  block:
    - name: Download Vault archive
      get_url:
        url: "{{ vault_linux_download_url }}"
        dest: "/tmp/{{ vault_linux_package_name }}"
        mode: 0600
        checksum: "{{ vault_linux_checksum }}"
        force: true

    - name: Install Vault CLI
      unarchive:
        src: "/tmp/{{ vault_linux_package_name }}"
        dest: "{{ vault_linux_dir }}"

- name: Check Kubernetes CLI installation
  command: which kubectl
  register: kubectl_installation
  changed_when: false
  ignore_errors: true
  check_mode: false

- name: Get installed Kubernetes CLI version
  shell: |
    set -o pipefail
    {{ kubectl_installation.stdout }} version --client --short|awk -F 'v' '{ print $2}'
  when: not kubectl_installation is failed
  changed_when: false
  check_mode: false
  register: installed_kubectl_version

- name: Kubernetes installation is required
  set_fact:
    kubernetes_cli_installation_required: "{{ kubectl_installation is failed or installed_kubectl_version.stdout != kubernetes_cli_version }}"

- name: Install Kubernetes CLI
  when:
    - kubernetes_cli_installation_required
  get_url:
    url: "{{ kubernetes_cli_linux_download_url }}"
    dest: "{{ kubernetes_cli_linux_file }}"
    force: true
    mode: 0755

- name: Check Minikube installation
  command: which minikube
  register: minikube_installation
  changed_when: false
  ignore_errors: true
  check_mode: false

- name: Get installed Minikube version
  shell: |
    set -o pipefail
    {{ minikube_installation.stdout }} version |awk -F ' ' '{ print $3 }'|sed -e 's/v//g'
  when: not minikube_installation is failed
  changed_when: false
  check_mode: false
  register: installed_minikube_version

- name: Minikube installation is required
  set_fact:
    minikube_installation_required: "{{ minikube_installation is failed or installed_minikube_version.stdout != minikube_version }}"

- name: Install Minikube CLI
  when:
    - minikube_installation_required
  get_url:
    url: "{{ minikube_linux_download_url }}"
    dest: "{{ minikube_linux_file }}"
    checksum: "{{ minikube_linux_checksum }}"
    mode: 0755
    force: true

- name: Check GCloud SDK installation
  command: which gcloud
  register: gcloud_sdk_installation
  changed_when: false
  ignore_errors: true
  check_mode: false

- name: Get installed GCloud version
  shell: |
    set -o pipefail
    {{ gcloud_sdk_installation.stdout }} version|head -1|awk -F ' ' '{ print $4 }'
  when: not gcloud_sdk_installation is failed
  changed_when: false
  check_mode: false
  register: installed_gcloud_sdk_version

- name: GCloud installation is required
  set_fact:
    gcloud_sdk_installation_required: "{{ gcloud_sdk_installation is failed or installed_gcloud_sdk_version.stdout != gcloud_sdk_version }}"

- name: Google Clouds SDK installation
  when:
    - gcloud_sdk_installation_required
  block:
    - name: Install Google Cloud SDK
      unarchive:
        src: "{{ gcloud_sdk_linux_download_url }}"
        dest: "{{ gcloud_sdk_linux_dir }}"
        remote_src: true

    - name: Adding GCloud command to user path
      file:
        src: "{{ gcloud_sdk_linux_dir }}/google-cloud-sdk/bin/gcloud"
        dest: /home/{{ user }}/bin/gcloud
        state: link

- name: Install Azure CLI
  pip:
    name: azure-cli
    virtualenv: "{{ azure_cli_dir }}"
    version: "{{ azure_cli_version }}"

- name: Install AWS CLI
  pip:
    name: awscli
    virtualenv: "{{ aws_cli_dir }}"
    version: "{{ aws_cli_version }}"

- name: Check Krew installation
  command: which krew
  register: krew_installation
  changed_when: false
  ignore_errors: true
  check_mode: false

- name: Get installed Krew version
  shell: |
    set -o pipefail
    {{ krew_installation.stdout }} version|grep GitTag|awk -F' ' '{ print $2}'|sed -e 's/v//g'
  when: not krew_installation is failed
  changed_when: false
  check_mode: false
  register: installed_krew_version

- name: Krew installation is required
  set_fact:
    krew_installation_required: "{{ krew_installation is failed or installed_krew_version.stdout != krew_version }}"

- name: Krew installation
  when:
    - krew_installation_required
  block:
    - name: Download Krew archive
      get_url:
        url: "{{ krew_download_url }}"
        dest: "/tmp/{{ krew_package_name }}"
        mode: 0600
        checksum: "{{ krew_checksum }}"
        force: true

    - name: Extract Krew archive
      unarchive:
        src: "/tmp/{{ krew_package_name }}"
        dest: "/tmp"

    - name: Install Krew CLI
      copy:
        src: "/tmp/{{ krew_linux_file }}"
        dest: "{{ krew_linux_dir }}/krew"
        owner: "{{ user }}"
        mode: 0755

    - name: Download Krew configuration
      get_url:
        url: "{{ krew_yaml_download_url }}"
        dest: "/home/{{ user }}/etc/"

- name: Check Istio installation
  command: which istioctl
  register: istio_installation
  changed_when: false
  ignore_errors: true
  check_mode: false

- name: Get installed Istio version
  shell: |
    set -o pipefail
    {{ istio_installation.stdout }} version|grep -e '^Version'|awk -F': ' '{ print $2 }'
  when: not istio_installation is failed
  changed_when: false
  check_mode: false
  register: installed_istio_version

- name: Istio installation is required
  set_fact:
    istio_installation_required: "{{ istio_installation is failed or installed_istio_version.stdout != istio_version }}"

- name: Istio installation
  when:
    - istio_installation_required
  block:
    - name: Download Istio archive
      get_url:
        url: "{{ istio_linux_download_url }}"
        dest: "/tmp/{{ istio_linux_package_name }}"
        mode: 0600
        checksum: "{{ istio_linux_checksum }}"
        force: true

    - name: Extract Istio archive
      unarchive:
        src: "/tmp/{{ istio_linux_package_name }}"
        dest: "{{ istio_linux_dir }}"

    - name: Install Istio CLI
      file:
        src: "{{ istio_linux_dir }}/istio-{{ istio_version }}/bin/istioctl"
        dest: /home/{{ user }}/bin/istioctl
        state: link

- name: Check Linkerd installation
  command: which linkerd
  register: linkerd_installation
  changed_when: false
  ignore_errors: true
  check_mode: false

- name: Get installed Linkerd version
  shell: |
    set -o pipefail
    {{ linkerd_installation.stdout }} version|awk -F'-' '{ print $2 }'|head -1
  when: not linkerd_installation is failed
  changed_when: false
  check_mode: false
  register: installed_linkerd_version

- name: Linkerd installation is required
  set_fact:
    linkerd_installation_required: "{{ linkerd_installation is failed or installed_linkerd_version.stdout != linkerd_version }}"

- name: Install Linkerd binary
  when:
    - linkerd_installation_required
  get_url:
    url: "{{ linkerd_linux_download_url }}"
    dest: "{{ linkerd_linux_file }}"
    mode: 0755
    checksum: "{{ linkerd_linux_checksum }}"
    force: true

- name: Check Kustomize installation
  command: which kustomize
  register: kustomize_installation
  changed_when: false
  ignore_errors: true
  check_mode: false

- name: Get installed Kustomize version
  shell: |
    set -o pipefail
    {{ kustomize_installation.stdout }} version|awk -F' ' '{ print $2 }'|awk -F':' '{ print $2 }'
  when: not kustomize_installation is failed
  changed_when: false
  check_mode: false
  register: installed_kustomize_version

- name: Kustomize installation is required
  set_fact:
    kustomize_installation_required: "{{ kustomize_installation is failed or installed_kustomize_version.stdout != kustomize_version }}"

- name: Install Kustomize CLI
  when:
    - kustomize_installation_required
  get_url:
    url: "{{ kustomize_linux_download_url }}"
    dest: "{{ kustomize_linux_file }}"
    checksum: "{{ kustomize_linux_checksum }}"
    mode: 0755
    force: true

- name: Check Kind installation
  command: which kind
  register: kind_installation
  changed_when: false
  ignore_errors: true
  check_mode: false

- name: Get installed Kind version
  shell: |
    set -o pipefail
    {{ kind_installation.stdout }} version |awk -F ' ' '{ print $3 }'|sed -e 's/v//g'
  when: not kind_installation is failed
  changed_when: false
  check_mode: false
  register: installed_kind_version

- name: Kind installation is required
  set_fact:
    kind_installation_required: "{{ kind_installation is failed or installed_kind_version.stderr != kind_version }}"
    # kind_installation_required: "{{ kind_installation is failed or installed_kind_version.stdout != kind_version }}"

# See https://github.com/kubernetes-sigs/kind/pull/203

- name: Install Kind CLI
  when:
    - kind_installation_required
  get_url:
    url: "{{ kind_linux_download_url }}"
    dest: "{{ kind_linux_file }}"
    mode: 0755
    force: true
